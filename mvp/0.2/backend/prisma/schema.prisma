generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  username  String   @unique
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  preferences UserPreferences?
  playlists Playlist[]
}

model UserPreferences {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique
  user            User     @relation(fields: [userId], references: [id])
  theme           String   @default("light")
  language        String   @default("en")
  notifications   Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model TextContent {
  id        Int      @id @default(autoincrement())
  content   String
  type      String
  language  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lyrics {
  id        Int      @id @default(autoincrement())
  content   String
  lrc       String?
  timestamps Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  song      Song?
}

model Artist {
  id          Int      @id @default(autoincrement())
  name        String
  bio         String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  songs       Song[]
}

model Song {
  id          Int      @id @default(autoincrement())
  title       String
  artistId    Int
  artist      Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)
  duration    Int?     // Duration in seconds
  audioUrl    String?
  lyricsId    Int?     @unique
  lyrics      Lyrics?  @relation(fields: [lyricsId], references: [id], onDelete: SetNull)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  playlists   PlaylistSong[]
  tags        SongTag[]
}

model Playlist {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  isPublic    Boolean  @default(false)
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  songs       PlaylistSong[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PlaylistSong {
  id          Int      @id @default(autoincrement())
  playlistId  Int
  playlist    Playlist @relation(fields: [playlistId], references: [id])
  songId      Int
  song        Song     @relation(fields: [songId], references: [id])
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([playlistId, songId])
}

model Tag {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  songs       SongTag[]
}

model SongTag {
  id        Int      @id @default(autoincrement())
  songId    Int
  song      Song     @relation(fields: [songId], references: [id])
  tagId     Int
  tag       Tag      @relation(fields: [tagId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([songId, tagId])
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
} 