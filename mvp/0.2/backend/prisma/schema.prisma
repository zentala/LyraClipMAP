generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  password        String
  username        String           @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  role            UserRole         @default(USER)
  playlists       Playlist[]
  sharedPlaylists PlaylistShare[]
  preferences     UserPreferences?
}

model UserPreferences {
  id            Int      @id @default(autoincrement())
  userId        Int      @unique
  theme         String   @default("light")
  language      String   @default("en")
  notifications Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}

model TextContent {
  id        Int      @id @default(autoincrement())
  content   String
  type      String
  language  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lyrics {
  id         Int      @id @default(autoincrement())
  timestamps Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  language   String
  sourceUrl  String?
  text       String
  songs      Song[]
}

model Artist {
  id        Int      @id @default(autoincrement())
  name      String
  bio       String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  songs     Song[]
}

model Song {
  id          Int            @id @default(autoincrement())
  title       String
  artistId    Int
  duration    Int
  lyricsId    Int
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  genre       String
  releaseYear Int
  audioUrl    String?
  playlists   PlaylistSong[]
  artist      Artist         @relation(fields: [artistId], references: [id])
  lyrics      Lyrics         @relation(fields: [lyricsId], references: [id])
  tags        SongTag[]
}

model Playlist {
  id          Int             @id @default(autoincrement())
  name        String
  description String?
  isPublic    Boolean         @default(false)
  userId      Int
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  user        User            @relation(fields: [userId], references: [id])
  shares      PlaylistShare[]
  songs       PlaylistSong[]
}

model PlaylistSong {
  id         Int      @id @default(autoincrement())
  playlistId Int
  songId     Int
  order      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  song       Song     @relation(fields: [songId], references: [id])

  @@unique([playlistId, songId])
}

model Tag {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  category    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  songs       SongTag[]
}

model SongTag {
  id        Int      @id @default(autoincrement())
  songId    Int
  tagId     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  song      Song     @relation(fields: [songId], references: [id])
  tag       Tag      @relation(fields: [tagId], references: [id])

  @@unique([songId, tagId])
}

model PlaylistShare {
  id         Int                @id @default(autoincrement())
  playlistId Int
  userId     Int
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  permission PlaylistPermission
  playlist   Playlist           @relation(fields: [playlistId], references: [id])
  user       User               @relation(fields: [userId], references: [id])

  @@unique([playlistId, userId])
}

enum PlaylistPermission {
  VIEW
  EDIT
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}
